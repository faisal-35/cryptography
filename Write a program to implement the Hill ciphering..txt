import numpy as np

# Helper functions
def char_to_num(c):
    return ord(c.upper()) - ord('A')

def num_to_char(n):
    return chr((n % 26) + ord('A'))

def mod_inverse(a, m):
    for x in range(1, m):
        if (a * x) % m == 1:
            return x
    return None

def matrix_mod_inv(matrix, modulus):
    det = int(np.round(np.linalg.det(matrix))) % modulus
    det_inv = mod_inverse(det, modulus)
    if det_inv is None:
        raise ValueError("Key matrix is not invertible modulo 26")

    # Compute adjugate matrix
    adjugate = np.array([[matrix[1][1], -matrix[0][1]],
                         [-matrix[1][0], matrix[0][0]]])
    
    inv_matrix = (det_inv * adjugate) % modulus
    return inv_matrix.astype(int)

# Encrypt a pair
def encrypt_pair(pair, key_matrix):
    vector = np.array([[char_to_num(pair[0])], [char_to_num(pair[1])]])
    result = np.dot(key_matrix, vector) % 26
    return num_to_char(result[0][0]) + num_to_char(result[1][0])

# Decrypt a pair
def decrypt_pair(pair, inv_key_matrix):
    vector = np.array([[char_to_num(pair[0])], [char_to_num(pair[1])]])
    result = np.dot(inv_key_matrix, vector) % 26
    return num_to_char(result[0][0]) + num_to_char(result[1][0])

# Encrypt function
def hill_encrypt(plaintext, key_matrix):
    plaintext = plaintext.upper().replace(" ", "")
    if len(plaintext) % 2 != 0:
        plaintext += 'X'

    ciphertext = ""
    for i in range(0, len(plaintext), 2):
        ciphertext += encrypt_pair(plaintext[i:i+2], key_matrix)
    return ciphertext

# Decrypt function
def hill_decrypt(ciphertext, key_matrix):
    inv_key_matrix = matrix_mod_inv(key_matrix, 26)
    plaintext = ""
    for i in range(0, len(ciphertext), 2):
        plaintext += decrypt_pair(ciphertext[i:i+2], inv_key_matrix)
    return plaintext

# Main
def main():
    # 2x2 invertible key matrix mod 26
    key_matrix = np.array([[3, 3],
                           [2, 5]])

    choice = input("Choose (E)ncrypt or (D)ecrypt: ").strip().upper()
    if choice == 'E':
        plaintext = input("Enter plaintext: ")
        ciphertext = hill_encrypt(plaintext, key_matrix)
        print("Encrypted text:", ciphertext)
    elif choice == 'D':
        ciphertext = input("Enter ciphertext: ")
        plaintext = hill_decrypt(ciphertext, key_matrix)
        print("Decrypted text:", plaintext)
    else:
        print("Invalid choice.")

if __name__ == "__main__":
    main()
