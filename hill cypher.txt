import numpy as np

# Helper: Convert a character to number (a=0, b=1, ..., z=25)
def char_to_num(char):
    return ord(char) - ord('a')

# Helper: Convert number to character
def num_to_char(num):
    return chr((num % 26) + ord('a'))

# Helper: Modular inverse of a number under mod 26
def mod_inverse(a, m=26):
    for x in range(1, m):
        if (a * x) % m == 1:
            return x
    return None

# Helper: Inverse of a 2x2 matrix mod 26
def matrix_inverse_mod_26(matrix):
    det = int(np.round(np.linalg.det(matrix)))  # determinant
    det_inv = mod_inverse(det % 26, 26)  # modular inverse of determinant

    if det_inv is None:
        raise ValueError("Matrix is not invertible under mod 26")

    # adjugate matrix
    adj = np.array([[matrix[1][1], -matrix[0][1]],
                    [-matrix[1][0], matrix[0][0]]])

    inv_matrix = (det_inv * adj) % 26
    return inv_matrix.astype(int)

# Encrypt function
def hill_encrypt(plaintext, key_matrix):
    plaintext = plaintext.lower().replace(" ", "")
    if len(plaintext) % 2 != 0:
        plaintext += 'x'  # padding if odd number of letters

    ciphertext = ""
    for i in range(0, len(plaintext), 2):
        block = [char_to_num(plaintext[i]), char_to_num(plaintext[i+1])]
        vector = np.array(block).reshape(2, 1)
        encrypted_vector = np.dot(key_matrix, vector) % 26
        ciphertext += ''.join([num_to_char(num[0]) for num in encrypted_vector])
    return ciphertext

# Decrypt function
def hill_decrypt(ciphertext, key_matrix):
    inverse_matrix = matrix_inverse_mod_26(key_matrix)
    plaintext = ""
    for i in range(0, len(ciphertext), 2):
        block = [char_to_num(ciphertext[i]), char_to_num(ciphertext[i+1])]
        vector = np.array(block).reshape(2, 1)
        decrypted_vector = np.dot(inverse_matrix, vector) % 26
        plaintext += ''.join([num_to_char(num[0]) for num in decrypted_vector])
    return plaintext

# Example usage
if __name__ == "__main__":
    # Define a 2x2 key matrix (must be invertible mod 26)
    key = np.array([[3, 3],
                    [2, 5]])

    plaintext = "help"
    print("Original:", plaintext)

    encrypted = hill_encrypt(plaintext, key)
    print("Encrypted:", encrypted)

    decrypted = hill_decrypt(encrypted, key)
    print("Decrypted:", decrypted)
