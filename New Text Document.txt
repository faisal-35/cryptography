def generate_playfair_matrix(key):
    key = key.upper().replace("J", "I").replace(" ", "")
    matrix = []
    used = set()

    for char in key:
        if char not in used and char.isalpha():
            used.add(char)
            matrix.append(char)

    for char in "ABCDEFGHIKLMNOPQRSTUVWXYZ":  # J is merged with I
        if char not in used:
            used.add(char)
            matrix.append(char)

    return [matrix[i:i+5] for i in range(0, 25, 5)]

def find_position(matrix, char):
    for i, row in enumerate(matrix):
        for j, c in enumerate(row):
            if c == char:
                return i, j
    return None

def prepare_text(text, for_encryption=True):
    text = text.upper().replace("J", "I").replace(" ", "")
    i = 0
    prepared = ""

    while i < len(text):
        a = text[i]
        b = ''
        if i + 1 < len(text):
            b = text[i + 1]
        if a == b:
            b = 'X'
            prepared += a + b
            i += 1
        else:
            if i + 1 < len(text):
                prepared += a + b
                i += 2
            else:
                prepared += a + 'X'
                i += 1
    return prepared

def playfair_encrypt(matrix, plaintext):
    ciphertext = ""
    prepared = prepare_text(plaintext)

    for i in range(0, len(prepared), 2):
        a, b = prepared[i], prepared[i+1]
        row1, col1 = find_position(matrix, a)
        row2, col2 = find_position(matrix, b)

        if row1 == row2:
            ciphertext += matrix[row1][(col1 + 1) % 5]
            ciphertext += matrix[row2][(col2 + 1) % 5]
        elif col1 == col2:
            ciphertext += matrix[(row1 + 1) % 5][col1]
            ciphertext += matrix[(row2 + 1) % 5][col2]
        else:
            ciphertext += matrix[row1][col2]
            ciphertext += matrix[row2][col1]

    return ciphertext

def playfair_decrypt(matrix, ciphertext):
    plaintext = ""

    for i in range(0, len(ciphertext), 2):
        a, b = ciphertext[i], ciphertext[i+1]
        row1, col1 = find_position(matrix, a)
        row2, col2 = find_position(matrix, b)

        if row1 == row2:
            plaintext += matrix[row1][(col1 - 1) % 5]
            plaintext += matrix[row2][(col2 - 1) % 5]
        elif col1 == col2:
            plaintext += matrix[(row1 - 1) % 5][col1]
            plaintext += matrix[(row2 - 1) % 5][col2]
        else:
            plaintext += matrix[row1][col2]
            plaintext += matrix[row2][col1]

    return plaintext

# ==== Example usage ====
if __name__ == "__main__":
    key = "MONARCHY"
    plaintext = "INSTRUMENTS"

    matrix = generate_playfair_matrix(key)
    print("Playfair Matrix:")
    for row in matrix:
        print(row)

    encrypted = playfair_encrypt(matrix, plaintext)
    print("\nEncrypted:", encrypted)

    decrypted = playfair_decrypt(matrix, encrypted)
    print("Decrypted:", decrypted)
